name: Deploy action for NextJS

on:
  workflow_dispatch:
    inputs:
      deploy_note:
        description: 'Write down your note for this deploy version'
        required: true
        default: 'Deploy frontend server' 
      deploy_branch:
        description: 'Type branch name'
        required: true
        default: 'dev' 
jobs:
  # Auto deploy to Staging server
  deploy-staging:
    name: Deploy to Staging with dev branch
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/${{ github.event.inputs.deploy_branch }}'
    env:
      SOURCE_PATH: "PhoneType/PhoneTypeClient"
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User root
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.HOST }}
      # Checkout code and build
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      # Setup cache to increase speed
      - uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Copy .env file from remote server
        run: |
          rsync -av staging:$SOURCE_PATH/.env ./
      - name: Create build to temp folder
        run: |
          npm install
          BUILD_DIR=temp ./node_modules/next/dist/bin/next build
      - name: Copy build folder to remote server
        run: |
          rsync -avz ./temp staging:$SOURCE_PATH/
      - name: SSH to server and run deploy.sh script
        run: ssh staging "cd" $SOURCE_PATH "&& sh deploy.sh ${{ github.event.inputs.deploy_branch }}"
